infinity=float('inf')
class AdjGraphError(TypeError):
    pass
class GraphA:
    def __init__(self,mat,unconn=0):
        vnum1=len(mat)
        for x in mat:
            if len(x)!=vnum1:
                raise ValueError("Wrong")
        self.mat=[self._out_edge(mat,vi,unconn) for vi in range(vnum1)]
        self.vnum=vnum1
        self.unconn=unconn
    def add_vertex(self):
        self.vnum+=1
        self.mat.append()
        return self.vnum-1
    def add_edge(self,vi,vj,val=1):
        assert 0<=vi<self.vnum and 0<=vj<self.vnum
        row=self.mat[vi]
        for i in range(len(row)):
            if row[i][0]==vj:
                self.mat[vi][i]=(vj,val)
                return
            if row[i][0]>vj:break
        else:
            i+=1
        self.mat[vi].insert(i,(vj,val))
    def get_edge(self, vi, vj):
        assert 0 <= vi < self.vnum and 0 <= vj < self.vnum
        for i, val in self.mat[vi]:
            if i == vj: return val
        return self.unconn

    def out_edges(self, vi):
        assert 0 <= vi < self.vnum
        return self.mat[vi]
    @staticmethod
    def _out_edge(mat,vi,unconn):
        edges=[]
        row=mat[vi]
        for i in range(len(row)):
            if row[i]!=unconn:
                edges.append((i,row[i]))
        return edges
    def __str__(self):
        return "[\n" + "\n".join(map(str, self.mat)) + "\n]" \
               + "\nUnconnected: " + str(infinity)
if __name__ == '__main__':
    # g1 = Graph(10)
    # g2 = Graph(10, infinity)
    # print(str(g1))
    # print(str(g2))

    gmat = [[0, 0, 3, 4], [2, 0, 0, 0], [4, 1, 0, 0], [2, 0, 1, 0]]

    g3 = GraphA(gmat, 0)
    print(str(g3))
    g3.add_edge(0, 3, 5)
    g3.add_edge(1, 3, 6)
    print(str(g3))
    g3.add_edge(3, 1, 9)
    # print(str(g3))
